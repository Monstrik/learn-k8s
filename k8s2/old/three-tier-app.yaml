# ===================================================================
#  SECRET for PostgreSQL Password
# ===================================================================
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
stringData:
  POSTGRES_PASSWORD: "mysecretpassword1"

---
# ===================================================================
#  PERSISTENT VOLUME CLAIM for PostgreSQL Data
# ===================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce # This volume can be mounted as read-write by a single node
  resources:
    requests:
      storage: 1Gi # Request 1 Gibibyte of storage

---
# ===================================================================
#  DATABASE TIER (PostgreSQL)
# ===================================================================
# Service to expose PostgreSQL within the cluster
apiVersion: v1
kind: Service
metadata:
  name: postgres-service # The DNS name the backend will use to connect
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

---
# StatefulSet to manage the PostgreSQL pod
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres-service"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "admin"
            - name: POSTGRES_DB
              value: "todos_db"
            - name: POSTGRES_PASSWORD_FILE
              value: "/etc/postgres-secret/POSTGRES_PASSWORD"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-secret-volume
              mountPath: "/etc/postgres-secret"
              readOnly: true
      volumes:
        - name: postgres-secret-volume
          secret:
            secretName: postgres-secret
  # The volume claim template provides the storage from our PVC
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

---
# ===================================================================
#  BACKEND API TIER
# ===================================================================
# Service to expose the Backend API to the Frontend
apiVersion: v1
kind: Service
metadata:
  name: backend-api-service # The DNS name the frontend will use
spec:
  selector:
    app: backend-api
  ports:
    - port: 80
      targetPort: 3000

---
# Deployment for the Backend API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
spec:
  replicas: 2 # Run 2 pods for availability
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
        - name: backend-api
          image: prakhar1989/todo-api:1.0 # A pre-built sample API image
          ports:
            - containerPort: 3000
          env:
            - name: DATABASE_HOST
              value: "postgres-service" # Connect to the DB using its Service name
            - name: DATABASE_USER
              value: "admin"
            - name: DATABASE_NAME
              value: "todos_db"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret # Pull password from our Secret
                  key: POSTGRES_PASSWORD

---
# ===================================================================
#  FRONTEND TIER
# ===================================================================
# Service to expose the Frontend to the outside world
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  # Using NodePort for easy access in local environments like Minikube/Docker Desktop.
  # For cloud providers, you would typically change this to LoadBalancer.
  type: NodePort
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080 # We can access the app on <NodeIP>:30080

---
# Deployment for the Frontend UI
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: prakhar1989/todo-frontend:1.0 # A pre-built sample UI
          ports:
            - containerPort: 80
          env:
            # This sample app requires an env var to know where the API is.
            # It will make requests to http://backend-api-service
            - name: API_HOST
              value: "backend-api-service"