# ===================================================================
#  DATABASE TIER (PostgreSQL)
# ===================================================================
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
stringData:
  POSTGRES_PASSWORD: "mysecretpassword"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres-service"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "admin"
            - name: POSTGRES_DB
              value: "todos_db"
            - name: POSTGRES_PASSWORD_FILE
              value: "/etc/postgres-secret/POSTGRES_PASSWORD"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-secret-volume
              mountPath: "/etc/postgres-secret"
              readOnly: true
      volumes:
        - name: postgres-secret-volume
          secret:
            secretName: postgres-secret
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

---
# ===================================================================
#  BACKEND API TIER (Echo Server)
# ===================================================================
apiVersion: v1
kind: Service
metadata:
  name: backend-api-service
spec:
  selector:
    app: backend-api
  ports:
    - port: 80
      targetPort: 8080 # <--- The echo server listens on port 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
        - name: backend-api
          image: jmalloc/echo-server 
          ports:
            - containerPort: 8080
---
# ===================================================================
#  FRONTEND TIER (NGINX with custom HTML)
# ===================================================================
apiVersion: v1
kind: ConfigMap # a custom index.html file
metadata:
  name: frontend-html-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>K8s Connection Test</title>
    </head>
    <body>
      <h1>Frontend to Backend Connection Test</h1>
      <p>Click the button to send a request from this NGINX frontend to the backend echo-server.</p>
      <button onclick="testConnection()">Test Connection</button>
      <hr>
      <h2>Backend Response:</h2>
      <pre id="response"></pre>
      <script>
        function testConnection() {
          document.getElementById('response').innerText = 'Loading...';
          // This fetch call goes to the Kubernetes Service name
          // fetch('http://backend-api-service')
          fetch('/api')
            .then(response => response.json())
            .then(data => {
              document.getElementById('response').innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
              document.getElementById('response').innerText = 'Error: ' + error + '\n\nCould not connect to the backend. Check service name and network policies.';
            });
        }
      </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: html-volume
              mountPath: /usr/share/nginx/html/index.html
              subPath: index.html # Important: specifies the file to mount
      volumes: # Define the volume using our ConfigMap
        - name: html-volume
          configMap:
            name: frontend-html-config
